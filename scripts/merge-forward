#!/bin/bash -e
#
# Merge version branches into next version branch
# 

WHEREAMI=$(dirname $0)
. "${WHEREAMI}/common"

#Get version parameter
VERSION=$1
if [ -z "$VERSION" ]; then
    die "Must specify VERSION as command-line option"
fi

#make temp dir
TEMPDIR=`mktemp -d`
narrate "Creating workspace in $TEMPDIR"

#Init failed merges
FAILED_MERGES=""

#list project
for PROJECT in "${PROJECTS[@]}"
do
    cd $TEMPDIR
    # checkout clean copy
    narrate ""
    narrate "[${PROJECT}]"
    GIT_URL="https://github.com/${ORG}/${PROJECT}"
    narrate "Downloading $GIT_URL"
    git clone $GIT_URL $PROJECT
    if [ $? -ne 0 ]; then
        warn "Unable to checkout $PROJECT, skipping"
        continue
    fi
    
    #get branch
    cd $PROJECT
    git fetch
    narrate "Fetching branch ${VERSION}"
    HAS_BRANCH=$(git branch --list -r origin/${VERSION})
    if [ -z $HAS_BRANCH ]; then
        warn "$PROJECT does not contain branch $VERSION, skipping"
        continue
    fi
    
    #make sure we can find next-versions
    if [ ! -e "${WHEREAMI}/next-versions" ]; then
        die "Unable to call ${WHEREAMI}/next-versions. Make sure you are executing this script with full path"
    fi
    
    #TODO:MERGE FORWARD INTO NEXT MAJOR release if exists
    for NEXT_VERSION in $("${WHEREAMI}/next-versions" "${VERSION}")
    do
	narrate "Creating ${NEXT_VERSION}"
        # checkout branches since git sometimes needs this to merge
        git checkout $VERSION
        NEXT_VERSION="$(echo -e "${NEXT_VERSION}" | tr -d '[:space:]')" #trim whitespace
        HAS_BRANCH=$(git branch --list -r origin/${NEXT_VERSION})
        if [ -n "$HAS_BRANCH" ]; then
	    narrate "Creating new branch for ${NEXT_VERSION}"
            git checkout $NEXT_VERSION
            MERGE_FAILED=0
            git merge -m "Merging $VERSION into $NEXT_VERSION" $VERSION || MERGE_FAILED=1
            if [ $MERGE_FAILED -eq 1 ]; then
                FAILED_MERGES="${FAILED_MERGES} ${PROJECT}"
            else
                git push
            fi
        fi
    done
done

#Clean-up TEMPDIR
echo ""
rm -rf $TEMPDIR

#report result
if [ -n "$FAILED_MERGES" ]; then
    echo "The following projects failed to merge:"
    echo "  $FAILED_MERGES"
    echo "[FAILED]"
    exit 1
else
    echo "[SUCCESS]"
fi

exit 0
